(amqp-queue-consumer "{{ctx.deployment.id}}-riemann" "{{ctx.deployment.id}}")

(periodically-expire {{constants.PERIODICAL_EXPIRATION_INTERVAL}} {:keep-keys [:node_id :node_name :host :service]})

{% for trigger_name, trigger in policy_triggers.iteritems()  %}

(register-policy-trigger "{{ctx.deployment.id}}" "{{trigger_name}}"
{{trigger.source}}
;New line is needed so there can be a comment in the last line of trigger source
)

{% endfor %}

(let [index (index)
      deployment-processing-queue
        (processing-queue "{{ctx.deployment.id}}" {:queue-size     1000
                                                   :core-pool-size 1
                                                   :max-pool-size  4})]
(def node-instances-stream {
  {% for stream in streams%}
    "{{stream.metadata.group}}.{{stream.metadata.policy}}" {}
  {%endfor%}
})

(streams

(default :ttl 60 index)

{% for stream in streams %}
; group={{stream.metadata.group}}
; policy={{stream.metadata.policy}}
; policy_type={{stream.metadata.policy_type}}
; members={{stream.metadata.members | join(", ")}}
(let [ctx {:blueprint-id  "{{ctx.blueprint.id}}"
           :deployment_id "{{ctx.deployment.id}}"
           :group         "{{stream.metadata.group}}"
           :policy        "{{stream.metadata.policy}}"}
      process-policy-triggers      (process-policy-triggers-stream
                                     ctx deployment-processing-queue)
      publish-policy-event         (publish-policy-event* ctx)
      publish-policy-error         (publish-policy-error* ctx)
      publish-log                  (publish-log* ctx)
      workflow-trigger-restraints  (concat (get-workflow-restraints
                                     ;Default restraints values are:
                                     ;is_node_started_before_workflow: true
                                     ;interval_between_workflows: 300
                                     (parse-boolean "{{stream.metadata.policy_properties.is_node_started_before_workflow}}")
                                     (or {{stream.metadata.policy_properties.interval_between_workflows}} 300)
                                   ) {{stream.additional_restraints}})
      check-restraints-and-process (fn [workflow-trigger-restraints]
        (check-restraints-and-process* ctx deployment-processing-queue workflow-trigger-restraints))
      metadata_stream_id "{{stream.metadata.group}}.{{stream.metadata.policy}}"]
(where* (is-node-name-in {%for m in stream.metadata.members%} "{{m}}" {%endfor%})
  (exception-stream publish-policy-error
    (fn [event]
      (def node-instances-stream
        (if (contains? (node-instances-stream metadata_stream_id) (:node_id event))
          node-instances-stream
          (assoc node-instances-stream
                 metadata_stream_id
                 (assoc (node-instances-stream metadata_stream_id)
                        (:node_id event)
                        (sdo
                          {{stream.data}}
                          ;New line is needed so there can be a comment
                          ;in the last line of policy source
                        ))))))
    {%for m in stream.metadata.members%}
      (where* (is-node-name-in "{{m}}")
        (fn [event] (((node-instances-stream metadata_stream_id) (:node_id event)) event))
      )
    {%endfor%}
))){% endfor %}))
