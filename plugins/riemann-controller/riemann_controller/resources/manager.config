;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: Imports
;;

(ns riemann.config
  (:import  [java.util HashMap]
            [java.util.concurrent ConcurrentHashMap])
  (:require riemann.core
            riemann.transport
            [clojure.java.io   :as io]
            [cheshire.core     :as json]
            [langohr.core      :as l-core]
            [langohr.channel   :as l-channel]
            [langohr.queue     :as l-queue]
            [langohr.consumers :as l-consumers]
            [langohr.exchange  :as l-exchange]
            [langohr.basic     :as l-basic]
            [clj-time.core     :as time-core]
            [clj-time.format   :as time-format])
  (:use     [riemann.service   :only [Service ServiceEquiv]]))

;;
;; End Section: Imports
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: Forward reference
;;

(def amqp-connection-service)
(def events-publisher)
(def triggers-map)
(def groups-map)

;;
;; End Section: Forward reference
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: RabbitMQ services
;;
;; TODO: all the thread semantics are not clear to me yet, need to investigate.
;; From what I understand, the connection has its own thread(pool?) and it passes
;; events to the channel, which then processes them in its own thread(pool?)
;; which calls the subsribed consumers using that thread(pool?)
;; [another possibliy is that each consumer has its own thread(pool?) ?? not sure]
;; anyway, it is on the final thread(pool?) (either the channel or the consumer one if such exists)
;; that the queue message handler is invoked which in turn, means it is on that thread(pool?) the riemann
;; events will be processed and passed to the core streams. Thus, event processing should probably never block
;; and delegate blocking operations to some other thread pool for blocking operations.

(defn bind-queue
  [channel exchange-name routing-key queue-name]
  (l-exchange/declare channel
                      exchange-name
                      "topic"
                      :durable false
                      :auto-delete true
                      :internal false)
  (l-queue/declare channel
                   queue-name
                   :exclusive false
                   :durable false
                   :auto-delete true)
  (l-queue/bind channel
                queue-name
                exchange-name
                :routing-key routing-key))

(defn queue-message-handler [core]
  (fn [ch {:keys [content-type delivery-tag type] :as meta} ^bytes payload]
    (let [event (json/parse-string (String. payload) true)]
      (riemann.core/stream! core event))))

(defrecord AMQPConnection [connection]
  ServiceEquiv
  (equiv? [this other]
    (instance? AMQPConnection other))

  Service
  (conflict? [this other]
    false)

  (reload! [this new-core]
    true)

  (start! [this]
    (locking this
      (when (not @connection)
        (let [new-connection (l-core/connect)]
          (info "AMQP connection opened")
          (reset! connection new-connection)))))

  (stop! [this]
    (locking this
      (when @connection
        (info "AMQP connection closing")
        (l-core/close @connection)
        (reset! connection nil)))))

(defn amqp-connection []
  ; connection is opened here because we need to make sure
  ; it is started before the manager queue service is started
  (let [new-connection (l-core/connect)]
    (info "AMQP connection opened")
    (service! (AMQPConnection. (atom new-connection)))))

(defrecord AMQPQueueConsumer [queue-name
                              routing-key
                              core
                              channel]
  ServiceEquiv
  (equiv? [this other]
    (and
      (instance? AMQPQueueConsumer other)
      (= queue-name (:queue-name other))
      (= routing-key (:routing-key other))))

  Service
  (conflict? [this other]
    (and
      (instance? AMQPQueueConsumer other)
      (= queue-name (:queue-name other))
      (= routing-key (:routing-key other))))

  (reload! [this new-core]
    (reset! core new-core))

  (start! [this]
    (locking this
      (when (not @channel)
        (let [connection    (:connection amqp-connection-service)
              new-channel   (l-channel/open @connection)
              exchange-name "cloudify-monitoring"]
          (bind-queue new-channel exchange-name routing-key queue-name)
          (l-consumers/subscribe new-channel
                                 queue-name
                                 (queue-message-handler @core)
                                 :auto-ack true)
          (info "AMQP" queue-name "consumer started")
          (reset! channel new-channel)))))

  (stop! [this]
    (locking this
      (when @channel
        (info "AMQP" queue-name "consumer stopping")
        (l-core/close @channel)
        (reset! channel nil)))))

(defn amqp-queue-consumer [queue-name routing-key]
  (service! (AMQPQueueConsumer. queue-name
                                routing-key
                                (atom nil)
                                (atom nil))))

(defprotocol EventsPublisher
  (pub-log [this item])
  (pub-event [this item]))

(defrecord AMQPEventsPublisher [core
                                channels]
  ServiceEquiv
  (equiv? [this other]
    (instance? AMQPEventsPublisher other))

  Service
  (conflict? [this other]
    false)

  (reload! [this new-core]
    (reset! core new-core))

  (start! [this]
    (locking this
      (when (not @channels)
        (let [connection     (:connection amqp-connection-service)
              events-channel (l-channel/open @connection)
              logs-channel   (l-channel/open @connection)
              events-queue-name "cloudify-events"
              logs-queue-name "cloudify-logs"]
          (l-queue/declare events-channel
                 events-queue-name
                 :exclusive false
                 :durable true
                 :auto-delete true)
          (l-queue/declare logs-channel
                 logs-queue-name
                 :exclusive false
                 :durable true
                 :auto-delete true)
          (info "AMQP events publisher created")
          (reset! channels {:events-channel events-channel
                            :logs-channel logs-channel})))))

  (stop! [this]
    (locking this
      (when @channels
        (info "AMQP events publisher stopping")
        (l-core/close (:events-channel @channels))
        (l-core/close (:logs-channel @channels))
        (reset! channels nil))))

  EventsPublisher
  (pub-log [this item]
    (let [body (json/generate-string item)]
      (try
        (l-basic/publish (:logs-channel @channels)
                         ""
                         "cloudify-logs"
                         body)
        (catch Exception e
          (warn "Failed publishing log:" body "(" e ")")))))

  (pub-event [this item]
    (let [body (json/generate-string item)]
      (try
        (l-basic/publish (:events-channel @channels)
                         ""
                         "cloudify-events"
                         body)
        (catch Exception e
          (warn "Failed publishing event:" body "(" e ")"))))))

(defn amqp-events-publisher []
  (service! (AMQPEventsPublisher. (atom nil)
                                  (atom nil))))

;;
;; End Section: RabbitMQ services
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: RabbitMQ events and logs
;;

(def datetime-formatter (time-format/formatter "YYYY-MM-dd HH:mm:ss.SSS"))

(defn- current-timestamp []
  ; TODO Seems to use a different timezone than python (UTC or something)
  (time-format/unparse datetime-formatter (time-core/now)))

(defn publish-log*
  [blueprint-id deployment-id group policy]
  (fn [message & {:keys [level] :or {level :info}}]
    (fn [event]
        (let [context {:blueprint_id blueprint-id
                       :deployment_id deployment-id
                       :node_id (:node_id event)
                       :group group
                       :policy policy}]
          (pub-log events-publisher {:logger "policy"
                                     :level level
                                     :message {:text message}
                                     :context context
                                     :timestamp (current-timestamp)
                                     :message_code nil
                                     :type "cloudify_log"})))))

(defn publish-policy-error*
  [blueprint-id deployment-id group policy]
  (fn [event]
    (let [message (str "exception thrown from policy: " (:description event))
          context {:blueprint_id blueprint-id
                   :deployment_id deployment-id
                   :group group
                   :policy policy}]
        (pub-log events-publisher {:logger "policy_error"
                                   :level :warn
                                   :message {:text message}
                                   :context context
                                   :timestamp (current-timestamp)
                                   :message_code nil
                                   :type "cloudify_log"}))))

(defn publish-policy-event*
  [blueprint-id deployment-id group policy]
  (fn [message & {:keys [args] :or {args nil}}]
    (fn [event]
      (let [context {:blueprint_id blueprint-id
                     :deployment_id deployment-id
                     :node_id (:node_id event)
                     :group group
                     :policy policy}]
          (pub-event events-publisher {:event_type "policy"
                                       :message {:text message :args args}
                                       :context context
                                       :timestamp (current-timestamp)
                                       :message_code nil
                                       :type "cloudify_event"})))))


(defn publish-trigger-event
  [event-type message trigger-ctx]
  ; event though the context is identical to the trigger-ctx
  ; i prefer being explict and having the event context structure appear
  ; here instead of having to look somewhere else for it
  (let [context {:blueprint_id (:blueprint-id trigger-ctx)
                 :deployment_id (:deployment-id trigger-ctx)
                 :node_id (:node-id trigger-ctx)
                 :group (:group trigger-ctx)
                 :policy (:policy trigger-ctx)
                 :trigger (:trigger trigger-ctx)
                 :trigger-parameters (:trigger-parameters trigger-ctx)}]
    (pub-event events-publisher {:event_type event-type
                                 :message {:text message :args nil}
                                 :context context
                                 :timestamp (current-timestamp)
                                 :message_code nil
                                 :type "cloudify_event"})))

;;
;; End Section: RabbitMQ events and logs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: Global riemann configuration
;;

(logging/init {:file "/tmp/riemann.log"})

;;
;; End Section: Global riemann configuration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: User definitions
;; Mostly helper predicates, streams, etc... used
;; when writing policies
;;


(defn- parse-params [elem event]
  (letfn [(handle-map [map-elem]
            (into {} (map #(-> [(key %1) (parse-params (val %1) event)]) elem)))
          (handle-seq [seq-elem]
            (into [] (map #(parse-params %1 event) elem)))
          (get-property? [entry]
            (let [e-key (key entry)
                  e-val (val entry)]
              (and (= e-key :get_property)
                   (sequential? e-val)
                   (= (count e-val) 2)
                   (= (first e-val) "SELF"))))]
    (cond
      (and (map? elem) (= (count elem) 1))
        (let [entry (first elem)]
          (if (get-property? entry)
            (get event (keyword (get (val entry) 1)))
            (handle-map elem)))
      (map? elem)
        (handle-map elem)
      (sequential? elem)
        (handle-seq elem)
      :else
        elem)))


; example: (where* (is-node-name "some_name") ...)
(defn is-node-name-in [& node-names]
  (fn [event]
    (let [event-node-name (:node_name event)
          node-name? (fn [node-name] (= node-name event-node-name))]
      (some node-name? node-names))))


(defn parse-boolean [raw-value]
  (= "true" (clojure.string/lower-case raw-value)))


(defn register-policy-trigger
  [deployment-id trigger-name trigger]
  (let [triggers (.get triggers-map deployment-id)]
    (.put triggers trigger-name trigger)))


(defn processing-queue
  [deployment-id thread-pool-opts]
  (async-queue! (keyword deployment-id) thread-pool-opts
    (fn [event]
      (let [ctx     (:ctx event)
            trigger (:trigger event)]
        (publish-trigger-event "processing_trigger" "Processing trigger" ctx)
        (try
          (trigger ctx)
          (publish-trigger-event "trigger_succeeded" "Trigger succeeded" ctx)
          (catch Exception e
            (publish-trigger-event "trigger_failed" (str "Trigger failed: " e) ctx)))))))


(defn process-policy-triggers-stream
  [blueprint-id deployment-id group-name policy-name deployment-processing-queue]
  (let [dep-triggers-map (.get triggers-map deployment-id)
        dep-groups-map   (.get groups-map deployment-id)
        group            ((keyword group-name) dep-groups-map)
        group-policies   (:policies group)
        group-policy     ((keyword policy-name) group-policies)
        policy-triggers  (:triggers group-policy)]
    (fn [event]
      (doseq [policy-trigger        policy-triggers]
        (let [policy-trigger-name   (key policy-trigger)
              policy-trigger-record (val policy-trigger)
              trigger-type          (:type policy-trigger-record)
              trigger-parameters    (:parameters policy-trigger-record)
              parsed-parameters     (parse-params trigger-parameters event)
              trigger               (.get dep-triggers-map trigger-type)
              ctx                   {:blueprint-id blueprint-id
                                     :deployment-id deployment-id
                                     :node-id (:node_id event)
                                     :group group-name
                                     :policy policy-name
                                     :trigger policy-trigger-name
                                     :trigger-parameters parsed-parameters}
              trigger-event         (assoc event :ctx ctx
                                                 :trigger trigger)]
          (deployment-processing-queue trigger-event))))))


;;
;; End Section: User definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: Deployments core administration
;;

(def config-lock              (Object.))
(def cores-map                (HashMap.))
(def triggers-map             (ConcurrentHashMap.))
(def groups-map               (ConcurrentHashMap.))
(def amqp-connection-service  (amqp-connection))
(def events-publisher         (amqp-events-publisher))

(defn start-config! [& children]
  (fn [event]
    (locking config-lock
      (let [config-path   (:config_path event)
            deployment-id (:deployment_id event)
            ok-path       (str config-path "/ok")
            groups-path   (str config-path "/groups")
            groups        (json/parse-string (slurp groups-path) true)]

        ; prepare config cores
        (reset! core      (riemann.core/core))
        (reset! next-core (riemann.core/core))

        (.put groups-map deployment-id groups)
        (.put triggers-map deployment-id (ConcurrentHashMap.))

        ; load configuration files and apply to create new core
        (include config-path)
        (apply!)

        ; external indication new node is up
        (spit ok-path "ok")

        (.put cores-map deployment-id @core)))))

(defn stop-config! [& children]
  (fn [event]
    (locking config-lock
      (let [ok-path       (str (:config_path event) "/ok")
            deployment-id (:deployment_id event)
            ; get core instance to stop and remove it from the map
            stopped-core  (.remove cores-map deployment-id)]

        (when stopped-core
          (io/delete-file ok-path)
          (riemann.core/stop! stopped-core))))))

;;
;; End Section: Deployments core administration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: Management core configuration
;;

(amqp-queue-consumer "manager-riemann" "manager-riemann")

(periodically-expire 5)

(let [index (index)]
  (streams
    (default :ttl 60 index)
    (where (and (service "cloudify.configuration")
                (state "start"))
      (start-config!))
    (where (and (service "cloudify.configuration")
                (state "stop"))
      (stop-config!))))

;;
;; End Section: Management core configuration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Section: Reload existing deployment cores
;;

(let [riemann-configs-path "/opt/celery/cloudify.management__worker/riemann"
      riemann-configs-dir (io/file riemann-configs-path)
      config-paths (filter
                     (fn [f]
                       (and
                         (.isDirectory f))
                         (.isFile (io/file f "ok")))
                     (.listFiles riemann-configs-dir))
      deployment-ids (map (fn [f] (.getName f)) config-paths)
      pairs (map vector config-paths deployment-ids)
      events (map
               (fn [pair]
                 {:service "cloudify.configuration"
                  :state "start"
                  :config_path (.getCanonicalPath (first pair))
                  :deployment_id (last pair)
                  :time 0})
               pairs)
      connection (l-core/connect)
      channel (l-channel/open connection)
      exchange-name "cloudify-monitoring"
      routing-key "manager-riemann"
      queue-name routing-key]
  (bind-queue channel exchange-name routing-key queue-name)
  (doseq [event events]
    (info "Will reload deployment:" (:deployment_id event) "core")
    (l-basic/publish channel
                     exchange-name
                     routing-key
                     (json/generate-string event)))
  (l-core/close channel)
  (l-core/close connection))

;;
;; End Section: Reload existing deployment cores
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
